'''Creates a Combine archive and writes it to an OMEX file.''' # Author: Lician P. Smith, May 19, 2025

from biosimulators_utils.combine.io import CombineArchiveWriter  # type: ignore
from biosimulators_utils.combine.validation import validate  # type: ignore
from biomodels_qc.utils import build_combine_archive  # type: ignore
from collections import namedtuple
from datetime import datetime
import tempfile
import os
import shutil
from typing import Optional
import zipfile

MANIFEST_FILE = "manifest.xml"
SEDML_FILE_PAT = "%s.sedml"
METADATA_FILE = "metadata.rdf"

METADATA_STR = """
<?xml version="1.0" encoding="UTF-8"?> 
        <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" 
            xmlns:dcterms="http://purl.org/dc/terms/" 
            xmlns:vCard="http://www.w3.org/2006/vcard/ns#" 
            xmlns:bqmodel="http://biomodels.net/model-qualifiers/"> 
        <rdf:Description rdf:about="."> 
        <dcterms:description> 
        %DESCRIPTION% </dcterms:description> 
        <dcterms:creator rdf:parseType="Resource"> 
        <vCard:hasName rdf:parseType="Resource"> 
        <vCard:family-name> %SURNAME% </vCard:family-name> 
        <vCard:given-name> %FIRSTNAME% </vCard:given-name> 
        </vCard:hasName> 
        <vCard:hasEmail rdf:resource=%EMAIL% />  
        <vCard:organization-name> %ORGANIZATION% </vCard:organization-name>  
        <vCard:hasURL rdf:resource=%URL%/>   
        </dcterms:creator>  
        <dcterms:created rdf:parseType="Resource">   
        <dcterms:W3CDTF> %DATE% </dcterms:W3CDTF>   
        </dcterms:created>   
        </rdf:Description>   
        </rdf:RDF>
"""

class ValidationResult:
    """
    A class to represent the validation result of an OMEX file.
    Attributes:
        is_valid (bool): Whether the OMEX file is valid or not.
        errors (list): A list of errors found during validation.
    """
    def __init__(self, validation_tuple:tuple):
        self.validation_tuple = validation_tuple

    def __repr__(self):
        return str(self.validation_tuple)
    
    def __bool__(self):
        if "error" in OMEXMaker._flatten(self.validation_tuple):
            return False
        else:
            return True


class OMEXMaker(object):
    def __init__(self, project_id:str="project",
                    omex_path:Optional[str]=None,
                    project_path:Optional[str]=None,):
        """
        Initialize the OMEXMaker object.
        Args:
            project_id (str): The ID of the project.
                            Default is "project".
            omex_path (str): Path to the OMEX file will be written.
                            Default is ./<project_id>.omex
            project_path (str): The path to the project directory.
                            Default is None.

        Usage:
            1. Create a project directory that contains only the files for the project.
            2. maker = OMEXMaker(<project_id>, <project_path>)
            3. maker.maker()
            4. if not maker.validateOmex()
                print("OMEX file is not valid")
            5. maker.cleanUp()
        """
        ## Initialize the OMEXMaker object
        if project_path is None:
            project_path = os.path.join(os.path.dirname(__file__))
        if omex_path is None:
            omex_path = os.path.join(os.getcwd(), project_id + ".omex")
        #
        self.project_id = project_id
        self.project_path = project_path
        self.omex_path = omex_path
        #
        self.temp_dir:Optional[str] = None
        self.archive = None

    def make(self,
                is_write_omex:bool=True,
                sbml_master = None,
                surname:str="Anon",
                firstname:str="Anon",
                email:str="anon@nowhere.com",
                organization:str="unknown",
                url:str="http://www.unknown.com",
                description:str="Generated by SimpleSEDML",
                date:Optional[str]=None):
        """
        Process a project directory to create a Combine archive and write it to an OMEX file.
        Removes any existing OMEX file and creates a new one.

        Args:
            is_write_omex (bool): Whether to write the OMEX file or not.
                            Default is True.
            sbml_master (str): The path to the SBML master file.
                            Default is None.
            surname (str): The surname of the creator.
                            Default is "Anon".
            firstname (str): The first name of the creator.
                            Default is "Anon".
            email (str): The email of the creator.
                            Default is "anon@nowhere.com"
            organization (str): The organization of the creator.
                            Default is "unknown".
            url (str): The URL of the creator.
                            Default is "http://www.unknown.com".
            description (str): The description of the project.
                            Default is "Generated by SimpleSEDML".
            date (str): The date of the project.i
                            Default is date of creation.

        Returns:
            tuple: A tuple containing the validation result and the path to the OMEX file.
        """
        ##
        def qt(string):
            return '"' + string + '"'
        ##
        # Initializations
        sedml_file = SEDML_FILE_PAT % self.project_id
        if sbml_master is None:
            sbml_master = os.path.join(self.project_path, sedml_file)
        manifest_path = os.path.join(self.project_path, MANIFEST_FILE)
        master_files = []
        if sbml_master:
            master_files.append(os.path.basename(sbml_master))
        # Remove any existing OMEX file
        if os.path.exists(self.omex_path):
            os.remove(self.omex_path)
        # Create the metadata file
        revised_metadata = str(METADATA_STR)
        revised_metadata = revised_metadata.replace("%DESCRIPTION%", description)
        revised_metadata = revised_metadata.replace("%SURNAME%", surname)
        revised_metadata = revised_metadata.replace("%FIRSTNAME%", firstname)
        revised_metadata = revised_metadata.replace("%EMAIL%", qt("mailto:" + email))
        revised_metadata = revised_metadata.replace("%ORGANIZATION%", organization)
        revised_metadata = revised_metadata.replace("%URL%", qt(url))
        if date is None:
            date = str(datetime.now().strftime("%Y-%m-%dT%H:%M:%S"))
        revised_metadata = revised_metadata.replace("%DATE%", date)
        with open(os.path.join(self.project_path, METADATA_FILE), "w") as f:
            f.write(revised_metadata)
        if os.path.exists(manifest_path):
            #Have to do this, otherwise build_combine_archive creates a duplicate!
            os.remove(manifest_path)
        self.archive = build_combine_archive(self.project_path, master_files)
        #Write the new manifest.xml file:
        combine_writer = CombineArchiveWriter()
        if is_write_omex:
            combine_writer.run(self.archive, self.project_path, self.omex_path)
        # Specify the correct format for the metadata file
        if self.archive is None:
            raise RuntimeError("archive is None")
        for content in self.archive.contents:
            if content.location == METADATA_FILE:
                content.format = "http://identifiers.org/combine.specifications/omex-metadata"
                break
        # Write the manifest file
        combine_writer.write_manifest(self.archive.contents, manifest_path)

    def validateOmex(self)->ValidationResult:
        """
        Validate the OMEX file.
        Args:
            omex_path (str): The path to the OMEX file.
            archive (CombineArchive): 
        Returns:
            
        """
        # Create a temporary directory to extract the OMEX file
        self.temp_dir = tempfile.mkdtemp()
        # Unzip the OMEX file in the temporary directory
        with zipfile.ZipFile(self.omex_path, 'r') as zip_ref:
            zip_ref.extractall(self.temp_dir)
        # Validate the OMEX file
        return ValidationResult(validate(self.archive, self.temp_dir))
    
    def cleanUp(self):
        """
        Clean up the temporary directory.
        """
        if self.temp_dir and os.path.exists(self.temp_dir):
            shutil.rmtree(self.temp_dir)
            self.temp_dir = None

    @staticmethod
    def _flatten(nested_iterable):
        """
        Flatten a nested list or tuple, regardless of nesting depth.
        
        Args:
            nested_iterable: A potentially nested list or tuple
            
        Returns:
            A flat list containing all elements with nesting removed
        """
        result = []
        
        for item in nested_iterable:
            # Check if the item is a list or tuple
            if isinstance(item, (list, tuple)):
                # If it is, recursively flatten it and extend the result
                result.extend(OMEXMaker._flatten(item))
            else:
                # If it's not a list or tuple, just append it to the result
                result.append(item)
        #       
        return result