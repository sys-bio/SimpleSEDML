'''Creates a Combine archive and writes it to an OMEX file.''' # Author: Lician P. Smith, May 19, 2025

from biosimulators_utils.combine.io import CombineArchiveWriter  # type: ignore
from biosimulators_utils.combine.validation import validate  # type: ignore
from biomodels_qc.utils import build_combine_archive  # type: ignore
from datetime import datetime
import os
from typing import Optional

MANIFEST_FILE = "manifest.xml"
SEDML_FILE_PAT = "%s.sedml"
METADATA_FILE = "metadata.rdf"

metadata = """
<?xml version="1.0" encoding="UTF-8"?> 
        <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" 
            xmlns:dcterms="http://purl.org/dc/terms/" 
            xmlns:vCard="http://www.w3.org/2006/vcard/ns#" 
            xmlns:bqmodel="http://biomodels.net/model-qualifiers/"> 
        <rdf:Description rdf:about="."> 
        <dcterms:description> 
        %DESCRIPTION% </dcterms:description> 
        <dcterms:creator rdf:parseType="Resource"> 
        <vCard:hasName rdf:parseType="Resource"> 
        <vCard:family-name> %SURNAME% </vCard:family-name> 
        <vCard:given-name> %FIRSTNAME% </vCard:given-name> 
        </vCard:hasName> 
        <vCard:hasEmail rdf:resource=%EMAIL% />  
        <vCard:organization-name> %ORGANIZATION% </vCard:organization-name>  
        <vCard:hasURL rdf:resource=%URL%/>   
        </dcterms:creator>  
        <dcterms:created rdf:parseType="Resource">   
        <dcterms:W3CDTF> %DATE% </dcterms:W3CDTF>   
        </dcterms:created>   
        </rdf:Description>   
        </rdf:RDF>
"""


def makeOMEX(project_id:str="project",
                omex_dir:Optional[str]=None,
                project_path:Optional[str]=None,
                is_write_omex:bool=True,
                sbml_master = None,
                surname:str="Anon",
                firstname:str="Anon",
                email:str="anon@nowhere.com",
                organization:str="unknown",
                url:str="http://www.unknown.com",
                description:str="Generated by SimpleSEDML",
                date:Optional[str]=None)->tuple:
    """
    Process a project directory to create a Combine archive and write it to an OMEX file.
    Args:
        project_id (str): The ID of the project. Default is "project".
        omex_dir (str): The directory where the OMEX file will be written.
                        Default is ./omex
        project_path (str): The path to the project directory.
                        Default is "." (current directory).
        is_write_omex (bool): Whether to write the OMEX file or not.
                        Default is True.
        sbml_master (str): The path to the SBML master file.
                        Default is None.
        surname (str): The surname of the creator.
                        Default is "Anon".
        firstname (str): The first name of the creator.
                        Default is "Anon".
        email (str): The email of the creator.
                        Default is "anon@nowhere.com"
        organization (str): The organization of the creator.
                        Default is "unknown".
        url (str): The URL of the creator.
                        Default is "http://www.unknown.com".
        description (str): The description of the project.
                        Default is "Generated by SimpleSEDML".
        date (str): The date of the project.i
                        Default is date of creation.

    Returns:
        tuple: A tuple containing the validation result and the path to the OMEX file.
    """
    ##
    def qt(string):
        return '"' + string + '"'
    ##
    # Initializations
    sedml_file = SEDML_FILE_PAT % project_id
    if project_path is None:
        project_path = os.path.join(os.path.dirname(__file__))
    if omex_dir is None:
        omex_dir = os.path.join(os.path.dirname(__file__), 'omex')
    if sbml_master is None:
        sbml_master = os.path.join(project_path, sedml_file)
    manifest_path = os.path.join(project_path, MANIFEST_FILE)
    master_files = []
    if sbml_master:
        master_files.append(os.path.basename(sbml_master))
    # Create the metadata file
    revised_metadata = str(metadata)
    revised_metadata = revised_metadata.replace("%DESCRIPTION%", description)
    revised_metadata = revised_metadata.replace("%SURNAME%", surname)
    revised_metadata = revised_metadata.replace("%FIRSTNAME%", firstname)
    revised_metadata = revised_metadata.replace("%EMAIL%", qt("mailto:" + email))
    revised_metadata = revised_metadata.replace("%ORGANIZATION%", organization)
    revised_metadata = revised_metadata.replace("%URL%", qt(url))
    if date is None:
        date = str(datetime.now().strftime("%Y-%m-%dT%H:%M:%S"))
    revised_metadata = revised_metadata.replace("%DATE%", date)
    with open(os.path.join(project_path, METADATA_FILE), "w") as f:
        f.write(revised_metadata)
    
    if os.path.exists(manifest_path):
        #Have to do this, otherwise build_combine_archive creates a new one!
        os.remove(manifest_path)
    archive = build_combine_archive(project_path, master_files)
    #Write the new manifest.xml file:
    combine_writer = CombineArchiveWriter()
    if is_write_omex:
        omex_path = os.path.join(omex_dir, project_id + ".omex")
        combine_writer.run(archive, project_path, omex_path)
    # Specify the correct format for the metadata file
    for content in archive.contents:
        if content.location == METADATA_FILE:
            content.format = "http://identifiers.org/combine.specifications/omex-metadata"
            break
    # Write the manifest file
    combine_writer.write_manifest(archive.contents, manifest_path)
    # FIXME: Must uzip file to do the validation
    validation_result = validate(archive, omex_dir)
    return validation_result